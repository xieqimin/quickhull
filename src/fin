import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class view extends Application{

    private ArrayList<Circle> circles=new ArrayList<Circle>();
    private ArrayList<Line> lines=new ArrayList<Line>();
    private ArrayList<dot> dotArrayList=new ArrayList<dot>();
    private stratequick stratequick=new stratequick();
    private Timeline timer;
    private Pane p1=new Pane();
    private boolean isfinish;
    private Button stopButton=new Button("暂停");
    private Button startButton=new Button("继续");
    private Button receButton=new Button("重新开始");
    /*public void setStrategy(strategy s){
        strategy=s;
    }*/


    public view(){}
    @Override
    public void start(Stage primaryStage) throws Exception {
        Button okbutton = new Button("OK");
        p1.setMinHeight(700);
        p1.setMinWidth(800);
        okbutton.setMinWidth(100);
        okbutton.setMinHeight(15);
        Text text=new Text("点击鼠标生成一个点");
        text.setX(150);
        text.setY(20);
        text.setStroke(Color.GRAY);

        timer=new Timeline(new KeyFrame(Duration.millis(1500),e->Peormed()));
        timer.setCycleCount(Timeline.INDEFINITE);
        GridPane gridPane =new GridPane();
        BorderPane borderPane=new BorderPane();
        stopButton.setOnAction(e->timer.pause());
        startButton.setMinSize(200,80);
        stopButton.setMinSize(200,80);
        receButton.setMinSize(200,80);
        startButton.setOnAction(e->timer.play());
        receButton.setOnAction(e->{

            for(int x=0;x<circles.size();x++){
                p1.getChildren().remove(circles.get(x));
            }
            for(int x=0;x<lines.size();x++){
                p1.getChildren().remove(lines.get(x));
            }
            borderPane.setBottom(null);
            p1.getChildren().add(okbutton);
            p1.getChildren().add(text);
            circles.clear();
            lines.clear();
            dotArrayList.clear();
            p1.setOnMouseClicked(ee -> {
                dotArrayList.add(new dot((int) ee.getX(), (int) ee.getY()));
                circles.add(new Circle());
                circles.get(circles.size() - 1).setCenterX((int) ee.getX());
                circles.get(circles.size() - 1).setRadius(3);
                circles.get(circles.size() - 1).setFill(new Color(Math.random(),Math.random(),Math.random(),Math.random()*0.2+0.7));
                //circles.get(circles.size() - 1).setFill(color.rgb(new Double(Math.random()*255).intValue(),
                //new Double(Math.random()*255).intValue(),new Double(Math.random()*255).intValue()));
                circles.get(circles.size() - 1).setCenterY((int) ee.getY());
                p1.getChildren().add(circles.get(circles.size() - 1));
            });

        });
        gridPane.add(stopButton,0,0);
        gridPane.add(startButton,1,0);
        gridPane.add(receButton,2,0);
        gridPane.setAlignment(Pos.CENTER);
        p1.getChildren().add(text);
        p1.getChildren().add(okbutton);

        borderPane.setCenter(p1);
        okbutton.setOnAction(e -> {
            p1.setOnMouseClicked(null);
            isfinish=false;
            int[][] xy = new int[dotArrayList.size()][2];
            for (int i = 0; i < dotArrayList.size(); i++) {
                xy[i][0] = dotArrayList.get(i).x;
                xy[i][1] = dotArrayList.get(i).y;
            }
            int[][] rexy = new int[2][2];
            stratequick.setDots(xy, dotArrayList.size(), rexy);
            lines.add(new javafx.scene.shape.Line());
            lines.get(0).setStartX(rexy[0][0]);
            lines.get(0).setStartY(rexy[0][1]);
            lines.get(0).setEndX(rexy[1][0]);
            lines.get(0).setEndY(rexy[1][1]);
            lines.get(0).setStrokeWidth(4);
            lines.get(0).setStroke(new Color(Math.random(),Math.random(),Math.random(),Math.random()*0.5+0.5));

            p1.getChildren().add(lines.get(lines.size()-1));
            borderPane.setBottom(gridPane);
            p1.getChildren().remove(text);
            p1.getChildren().remove(okbutton);
            timer.play();
        });
        p1.setOnMouseClicked(e -> {
            dotArrayList.add(new dot((int) e.getX(), (int) e.getY()));
            circles.add(new Circle());
            circles.get(circles.size() - 1).setCenterX((int) e.getX());
            circles.get(circles.size() - 1).setRadius(3);
            circles.get(circles.size() - 1).setFill(new Color(Math.random(),Math.random(),Math.random(),Math.random()*0.2+0.7));
            //circles.get(circles.size() - 1).setFill(color.rgb(new Double(Math.random()*255).intValue(),
            //new Double(Math.random()*255).intValue(),new Double(Math.random()*255).intValue()));
            circles.get(circles.size() - 1).setCenterY((int) e.getY());
            p1.getChildren().add(circles.get(circles.size() - 1));
        });

        Scene scene = new Scene(borderPane);
        primaryStage.setScene(scene);
        primaryStage.setMinHeight(900);
        primaryStage.setMinWidth(800);
        primaryStage.show();

    }

    private void romnandc(){

    }

    public void Peormed() {
        if (!isfinish) {
            int[] isone = new int[1];
            int[][] rexy = new int[3][2];
            int[][] delexy = new int[2][2];
            isfinish = stratequick.nextline(rexy, isone, delexy);
            if (!isfinish) {
                lines.add(new javafx.scene.shape.Line());
                lines.get(lines.size() - 1).setStartX(rexy[0][0]);
                lines.get(lines.size() - 1).setStartY(rexy[0][1]);
                lines.get(lines.size() - 1).setEndX(rexy[1][0]);
                lines.get(lines.size() - 1).setEndY(rexy[1][1]);
                lines.get(lines.size() - 1).setStrokeWidth(4);
                lines.get(lines.size() - 1).setStroke(new Color(Math.random(), Math.random(), Math.random(), Math.random()*0.5+0.5));
                p1.getChildren().add(lines.get(lines.size() - 1));
                //p1.getChildren().add(lines.get(lines.size()-1));
                lines.add(new javafx.scene.shape.Line());
                lines.get(lines.size() - 1).setStartX(rexy[1][0]);
                lines.get(lines.size() - 1).setStartY(rexy[1][1]);
                lines.get(lines.size() - 1).setEndX(rexy[2][0]);
                lines.get(lines.size() - 1).setEndY(rexy[2][1]);
                lines.get(lines.size() - 1).setStrokeWidth(4);
                lines.get(lines.size() - 1).setStroke(new Color(Math.random(), Math.random(), Math.random(),Math.random()*0.5+0.5));
                p1.getChildren().add(lines.get(lines.size() - 1));

                if (isone[0] == 1) {
                    for (int i = 0; i < lines.size() - 2; i++) {
                        if (lines.get(i).getStartX() == delexy[0][0] && lines.get(i).getStartY() == delexy[0][1]
                                && lines.get(i).getEndX() == delexy[1][0] && lines.get(i).getEndY() == delexy[1][1]) {
                            p1.getChildren().remove(lines.get(i));
                        }
                    }
                }
            }
        }
    }


}

/*interface strategy{
    public  void randomdot(int n){}
    public  void nextline(){}
}*/

class stratequick  {
    //private dots dotss;
    private dots[] strack;
    private int top=0;
    private int down=0;
    public stratequick(){ }
    public void setDots(int[][] xy,int n,int[][] rexy){

        int min;
        int x;
        int y;
        down=0;
        top=0;
        for(int i=0;i<n;i++){
            min=i;
            for(int j=i+1;j<n;j++){
                if(xy[j][0]<xy[min][0])
                    min=j;
                else if(xy[j][0]==xy[min][0]&&xy[j][1]<xy[min][1])
                    min=j;
            }
            x=xy[min][0];
            y=xy[min][1];
            xy[min][0]=xy[i][0];
            xy[min][1]=xy[i][1];
            xy[i][0]=x;
            xy[i][1]=y;
        }

        strack=new dots[25];
        strack[0]=new dots();
        strack[0].d1=new dot(xy[0][0],xy[0][1]);
        strack[0].d2=new dot(xy[n-1][0],xy[n-1][1]);

        int a=strack[0].d2.y-strack[0].d1.y;
        int b=strack[0].d1.x-strack[0].d2.x;
        int c=strack[0].d1.x*strack[0].d2.y-strack[0].d1.y*strack[0].d2.x;
        int[][] xy1=new int[n][2];
        int[][] xy2=new int[n][2];
        int n1=0;
        int n2=0;
        for(int i=0;i<n;i++){
            if(isup(a,b,c,xy[i][0],xy[i][1])==-1){
                xy1[n1][0]=xy[i][0];
                xy1[n1][1]=xy[i][1];
                n1++;
            }
            if(isup(a,b,c,xy[i][0],xy[i][1])==1){
                xy2[n2][0]=xy[i][0];
                xy2[n2][1]=xy[i][1];
                n2++;
            }
        }
        if(n1!=0) {
            strack[0].ds = new dot[n1];
            for (int i = 0; i < n1; i++) {
                strack[0].ds[i] = new dot(xy1[i][0], xy1[i][1]);
            }

            strack[0].n = n1;
            strack[0].isup = -1;
            top++;
        }
        if(n2!=0) {
            strack[top] = new dots();
            strack[top].ds = new dot[n2];
            strack[top].n = n2;
            for (int i = 0; i < n2; i++) {
                strack[top].ds[i] = new dot(xy2[i][0], xy2[i][1]);
            }
            strack[top].isup = 1;
            strack[top].d1 = new dot(xy[0][0], xy[0][1]);
            strack[top].d2 = new dot(xy[n - 1][0], xy[n - 1][1]);
            top++;
        }
        //返回线段
        rexy[0][0]=xy[0][0];
        rexy[0][1]=xy[0][1];
        rexy[1][0]=xy[n-1][0];
        rexy[1][1]=xy[n-1][1];
    }

    public boolean nextline(int[][] rexy,int[] isone,int[][] delexy) {
        if(top!=down) {
            int[][] xy1 = new int[strack[down].n][2];
            int[][] xy2 = new int[strack[down].n][2];
            int n1 = 0;
            int n2 = 0;

            int max = 0;
            for (int i = 1; i < strack[down].n; i++) {
                if (area(strack[down].d1, strack[down].d2, strack[down].ds[max]) < area(strack[down].d1, strack[down].d2, strack[down].ds[i]))
                    max = i;
            }
            int a1 = strack[down].ds[max].y - strack[down].d1.y;
            int b1 = strack[down].d1.x - strack[down].ds[max].x;
            int c1 = strack[down].d1.x * strack[down].ds[max].y - strack[down].d1.y * strack[down].ds[max].x;
            //找出线上或线下的点

            int a2 = -strack[down].ds[max].y + strack[down].d2.y;
            int b2 = -strack[down].d2.x + strack[down].ds[max].x;
            int c2 = -strack[down].d2.x * strack[down].ds[max].y + strack[down].d2.y * strack[down].ds[max].x;
            //找出线上或线下的点

            for(int i=0;i<strack[down].n;i++){
                if(isup(a1,b1,c1,strack[down].ds[i].x,strack[down].ds[i].y)==strack[down].isup){
                    xy1[n1][0]=strack[down].ds[i].x;
                    xy1[n1][1]=strack[down].ds[i].y;
                    n1++;
                }
                if(isup(a2,b2,c2,strack[down].ds[i].x,strack[down].ds[i].y)==strack[down].isup){
                    xy2[n2][0]=strack[down].ds[i].x;
                    xy2[n2][1]=strack[down].ds[i].y;
                    n2++;
                }
            }
            if(n1!=0) {
                strack[top] = new dots();
                strack[top].ds = new dot[n1];
                strack[top].n = n1;
                strack[top].d1=new dot(strack[down].d1.x,strack[down].d1.y);
                strack[top].d2=new dot(strack[down].ds[max].x,strack[down].ds[max].y);
                strack[top].isup = strack[down].isup;
                for (int i = 0; i < n1; i++) {
                    strack[top].ds[i] = new dot(xy1[i][0], xy1[i][1]);
                }
                top++;
            }
            if(n2!=0) {
                strack[top] = new dots();
                strack[top].ds = new dot[n2];
                strack[top].n = n2;
                strack[top].d1=new dot(strack[down].ds[max].x,strack[down].ds[max].y);
                strack[top].d2=new dot(strack[down].d2.x,strack[down].d2.y);
                strack[top].isup = strack[down].isup;
                for (int i = 0; i < n2; i++) {
                    strack[top].ds[i] = new dot(xy2[i][0], xy2[i][1]);
                }
                top++;
            }
            //返回线段
            rexy[0][0]=strack[down].d1.x;
            rexy[0][1]=strack[down].d1.y;
            rexy[1][0]=strack[down].ds[max].x;
            rexy[1][1]=strack[down].ds[max].y;
            rexy[2][0]=strack[down].d2.x;
            rexy[2][1]=strack[down].d2.y;
            //判断是否为一 撤销线

            if(down==0){
                isone[0]=0;
            }
            else{
                isone[0]=1;
                delexy[0][0]=strack[down].d1.x;
                delexy[0][1]=strack[down].d1.y;
                delexy[1][0]=strack[down].d2.x;
                delexy[1][1]=strack[down].d2.y;
            }
            down++;
            return false;
        }
        else
            return true;
    }
    private double area(dot d1,dot d2,dot d3){
        int result =d1.x*d2.y+d3.x*d1.y+d2.x*d3.y-d3.x*d2.y-d2.x*d1.y-d1.x*d3.y;
        if(result>=0)
            return result/2.0;
        else
            return -result/2.0;
    }
    private int isup(int a,int b,int c,int x,int  y){
        if(a*x+b*y-c>0)
            return -1;
        else if(a*x+b*y-c<0)
            return 1;
        else
            return 0;
    }
}
class dot{
    public int x;
    public int y;
    public dot(int x,int y){
        this.x=x;
        this.y=y;
    }
}
class dots{
    public dot[] ds;
    public int n=0;
    public dot d1;
    public dot d2;
    public int isup;//
    public dots(){ }
}
